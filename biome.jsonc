// Biome Configuration File (JSONC format)
// Converted from biome.toml to JSONC for native Biome support.
// Keep rules and options identical; only key casing changes where required.
{
  "$schema": "https://biomejs.dev/schemas/stable/schema.json",
  "root": true,
  "files": {
    "includes": ["**"],
    // Use .biomeignore for ignore patterns
    // Skip diagnostics for unrecognised file types
    "ignoreUnknown": true
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2,
    "lineWidth": 100
  },
  "javascript": {
    // Biome supports "transparent" or "reactClassic". Prefer transparent.
    "jsxRuntime": "transparent",
    "formatter": {
      "bracketSpacing": true,
      "jsxQuoteStyle": "double",
      "quoteStyle": "single",
      "semicolons": "always",
      "trailingCommas": "all"
    }
  },
  "vcs": {
    "useIgnoreFile": true
  },
  /*
  TODO: Enable when Biome adds support for Tailwind CSS directives
  Tracking: https://github.com/biomejs/biome/issues/XXXX (tailwindDirectives)
  Target: enable when Biome >= v1.9.0 or by 2025-01-31
  "css": {
    "parser": {
      "tailwindDirectives": true
    }
  },
  */
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "correctness": {
        "noInvalidConstructorSuper": "error",
        "noInvalidUseBeforeDeclaration": "error",
        "noUndeclaredVariables": "error",
        "noUnreachable": "error",
        "noUnsafeOptionalChaining": "error",
        "noUnusedImports": "error",
        "noUnusedVariables": "error",
        "useValidForDirection": "error",
        "useValidTypeof": "error"
      },
      "suspicious": {
        "noDuplicateObjectKeys": "error",
        "noConsole": "error",
        "noDebugger": "error",
        "noDoubleEquals": { "level": "error", "options": { "ignoreNull": false } },
        "noDuplicateCase": "error",
        "noDuplicateClassMembers": "error",
        "noDuplicateElseIf": "error",
        "noDuplicateParameters": "error",
        "noExplicitAny": "error",
        "noExtraNonNullAssertion": "error",
        "noFallthroughSwitchClause": "error",
        "noImplicitAnyLet": "error",
        "noImportAssign": "error",
        "noIrregularWhitespace": "error",
        "noPrototypeBuiltins": "error",
        "noShadowRestrictedNames": "error",
        "noVar": "error",
        "noConstEnum": "error",
        "useGetterReturn": "error",
        "noUnknownAtRules": "error"
      },
      "style": {
        "noInferrableTypes": "error",
        "noParameterAssign": "error",
        "noProcessEnv": "error",
        "useArrayLiterals": "error",
        "useConsistentArrayType": "error",
        "useConst": "error",
        "useExportType": "error",
        "useFilenamingConvention": {
          "level": "error",
          "options": {
            "requireAscii": true,
            "strictCase": true,
            "filenameCases": ["kebab-case", "export"]
          }
        },
        "useForOf": "error",
        "useImportType": "error",
        "useNamingConvention": {
          "level": "error",
          "options": {
            "requireAscii": true,
            "strictCase": true,
            "conventions": [
              { "selector": { "kind": "variable" }, "match": "(.{2,})" },
              { "selector": { "kind": "class" }, "formats": ["PascalCase"] },
              { "selector": { "kind": "typeLike" }, "formats": ["PascalCase"] },
              { "selector": { "kind": "enum" }, "formats": ["PascalCase"] },
              { "selector": { "kind": "classMember", "modifiers": ["private"] }, "match": "_(.+)" },
              // Global consts: allow camel/Pascal, not CONSTANT_CASE
              {
                "selector": { "kind": "const", "scope": "global" },
                "formats": ["camelCase", "PascalCase"]
              },
              // Class static readonly props: force camelCase
              {
                "selector": { "kind": "classProperty", "modifiers": ["static", "readonly"] },
                "formats": ["camelCase"]
              }
            ]
          }
        },
        "noNestedTernary": "error",
        "noUselessElse": "error",
        "useSelfClosingElements": "error",
        "useShorthandAssign": "error",
        "useShorthandFunctionType": "error",
        "useSingleVarDeclarator": "error",
        "useTemplate": "error",
        "useThrowOnlyError": "error"
      },
      "complexity": {
        "noArguments": "error",
        "noBannedTypes": "error",
        "noCommaOperator": "error",
        "noExcessiveCognitiveComplexity": {
          "level": "error",
          "options": { "maxAllowedComplexity": 15 }
        },
        "noForEach": "error",
        "noUselessCatch": "error",
        "noUselessTernary": "error",
        "noStaticOnlyClass": "error",
        "useWhile": "error"
      },
      "performance": {
        "noAccumulatingSpread": "error",
        "noNamespaceImport": "error",
        "noBarrelFile": "error"
      },
      "nursery": {
        "noFloatingPromises": "error",
        "noImportCycles": "error",
        "noNonNullAssertedOptionalChain": "error",
        // Prefer @ts-expect-error over @ts-ignore (no direct Biome rule in 2.2.2)
        "useExhaustiveSwitchCases": "error"
      }
    }
  },
  "overrides": [
    {
      // Ignore Terraform state/module caches generated by `terraform init`.
      // These artefacts are machine-written and churn frequently, so skipping
      // them prevents noisy diffs and avoids reformatting read-only metadata.
      "includes": ["**/.terraform/**"],
      "formatter": { "enabled": false },
      "linter": { "enabled": false }
    },
    {
      "includes": ["**/target/**"],
      "formatter": { "enabled": false },
      "linter": { "enabled": false }
    },
    {
      // Build scripts may legitimately write diagnostic output to the console.
      "includes": ["packages/tokens/build/**/*.js"],
      "linter": { "rules": { "suspicious": { "noConsole": "off" } } }
    },
    {
      // Tailwind/PostCSS styles include framework-specific atâ€‘rules in the app styles.
      // Scope suppression narrowly to the actual project layout.
      "includes": [
        "frontend-pwa/src/**/*.css",
        "frontend-pwa/src/**/*.pcss",
        "frontend-pwa/src/index.css"
      ],
      "linter": {
        "rules": {
          "suspicious": { "noUnknownAtRules": "off" }
        }
      }
    },
    {
      // Allow `x != null` nullish checks in fetcher for concise header/body logic
      "includes": ["frontend-pwa/src/api/fetcher.ts"],
      "linter": {
        "rules": {
          "suspicious": {
            "noDoubleEquals": { "level": "error", "options": { "ignoreNull": true } }
          }
        }
      }
    },
    {
      // Ignore generated type declaration files and dist outputs.
      "includes": ["**/*.d.ts", "**/dist/**"],
      "formatter": { "enabled": false },
      "linter": { "enabled": false }
    },
    {
      // Allow snake_case object properties in Zod schemas without inline ignores.
      // These files intentionally mirror API payload shapes.
      "includes": ["packages/types/**/*.{js,ts}"],
      "linter": {
        "rules": {
          "style": {
            "useNamingConvention": "off"
          }
        }
      }
    },
    {
      // Temporarily disable Biome for Tokens util pending refactor; avoid blocking CI.
      // This is intentionally narrow to a single file.
      "includes": ["packages/tokens/src/utils/tokens.js"],
      "formatter": { "enabled": false },
      "linter": { "enabled": false }
    },
    {
      "includes": [
        "**/*.{test,spec}.{js,jsx,ts,tsx}",
        "**/{__tests__,test,tests}/**/*.{js,jsx,ts,tsx}",
        "**/packages/**/*.{test,spec}.{js,jsx,ts,tsx}",
        "**/packages/**/{__tests__,test,tests}/**/*.{js,jsx,ts,tsx}",
        "**/{features,step_definitions,steps}/**/*.{js,jsx,ts,tsx}"
      ],
      "linter": {
        "rules": {
          "suspicious": {
            "noConsole": "off",
            "noExplicitAny": "warn"
          },
          "nursery": {
            "noFloatingPromises": "warn"
          }
        }
      }
    },
    {
      "includes": ["**/*.tsx"],
      "linter": {
        "rules": {
          "style": {
            "useFilenamingConvention": {
              "level": "error",
              "options": {
                "strictCase": true,
                "requireAscii": true,
                "filenameCases": ["PascalCase", "export"]
              }
            }
          }
        }
      }
    },
    {
      "includes": [
        "vite.config.{js,ts,mjs,cjs}",
        "rollup.config.{js,ts,mjs,cjs}",
        "webpack.config.{js,ts,mjs,cjs}",
        "**/{scripts,config}/**/*.{js,ts}"
      ],
      "linter": {
        "rules": {
          "style": {
            "noProcessEnv": "off"
          }
        }
      }
    }
  ]
}
