{
  "components": {
    "schemas": {
      "Error": {
        "additionalProperties": false,
        "description": "API error response payload.\n\n# Examples\n```\nuse backend::models::{Error, ErrorCode};\n\nlet err = Error::new(ErrorCode::NotFound, \"missing\");\nassert_eq!(err.code, ErrorCode::NotFound);\n```",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode",
            "description": "Stable machine-readable error code."
          },
          "details": {
            "description": "Supplementary error details.\n\nThis field should contain additional structured information about the error,\nsuch as validation errors, field-specific issues, or other context.\nThe expected format is a JSON object, for example:\n`{ \"field_errors\": { \"email\": \"invalid format\" }, \"reason\": \"missing data\" }`\nConsumers should document and maintain the structure of this object for consistency."
          },
          "message": {
            "description": "Human-readable error message.",
            "example": "Something went wrong",
            "type": "string"
          },
          "traceId": {
            "description": "Correlation identifier for tracing this error across systems.",
            "example": "01HZY8B2W6X5Y7Z9ABCD1234",
            "type": ["string", "null"]
          }
        },
        "required": ["code", "message"],
        "type": "object"
      },
      "ErrorCode": {
        "description": "Stable machine-readable error code.",
        "enum": ["invalid_request", "unauthorized", "forbidden", "not_found", "internal_error"],
        "type": "string"
      },
      "LoginRequest": {
        "description": "Login request body for `POST /api/v1/login`.\n\nExample JSON:\n`{\"username\":\"admin\",\"password\":\"password\"}`",
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": ["username", "password"],
        "type": "object"
      },
      "User": {
        "additionalProperties": false,
        "description": "Application user.",
        "properties": {
          "displayName": {
            "description": "Display name shown to other users",
            "example": "Ada Lovelace",
            "type": "string"
          },
          "id": {
            "description": "Stable user identifier",
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
            "type": "string"
          }
        },
        "required": ["id", "displayName"],
        "type": "object"
      }
    },
    "securitySchemes": {
      "cookieAuth": {
        "in": "cookie",
        "name": "session",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "description": "Public REST API for Wildside services.",
    "license": {
      "name": "ISC",
      "url": "https://opensource.org/license/isc-license-txt/"
    },
    "title": "Wildside API",
    "version": "0.1.0"
  },
  "openapi": "3.1.0",
  "paths": {
    "/api/v1/login": {
      "post": {
        "description": "Uses the centralised `Error` type so clients get a consistent\nerror schema across all endpoints.",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login success",
            "headers": {
              "Set-Cookie": {
                "description": "Session cookie",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [],
        "summary": "Authenticate user and establish a session.",
        "tags": ["users"]
      }
    },
    "/api/v1/users": {
      "get": {
        "description": "# Examples\n```\nuse actix_web::App;\nuse backend::api::users::list_users;\n\nlet app = App::new().service(list_users);\n```",
        "operationId": "listUsers",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Users"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Invalid request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorised"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not found"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal server error"
          }
        },
        "summary": "List known users.",
        "tags": ["users"]
      }
    },
    "/health/live": {
      "get": {
        "operationId": "live",
        "responses": {
          "200": {
            "description": "Server is alive"
          },
          "405": {
            "description": "Method not allowed; only GET probes are supported"
          },
          "503": {
            "description": "Server is shutting down"
          }
        },
        "security": [],
        "summary": "Liveness probe. Return 200 while the process is marked alive and 503 once draining.\nCall `HealthState::mark_unhealthy` before graceful shutdown to surface the drain early.",
        "tags": ["health"]
      }
    },
    "/health/ready": {
      "get": {
        "operationId": "ready",
        "responses": {
          "200": {
            "description": "Server is ready to handle traffic"
          },
          "405": {
            "description": "Method not allowed; only GET probes are supported"
          },
          "503": {
            "description": "Server is not ready"
          }
        },
        "security": [],
        "summary": "Readiness probe. Return 200 when dependencies are initialised and the server can handle traffic; return 503 otherwise.",
        "tags": ["health"]
      }
    }
  },
  "security": [
    {
      "cookieAuth": []
    }
  ],
  "servers": [
    {
      "description": "Local development server",
      "url": "https://api.wildside.test"
    }
  ],
  "tags": [
    {
      "description": "Operations related to users",
      "name": "users"
    },
    {
      "description": "Endpoints for health checks",
      "name": "health"
    }
  ]
}
