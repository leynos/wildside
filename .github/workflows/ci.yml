name: ci
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: '22'
      - uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2
        with:
          bun-version: '1.2.20'

      - name: Install uv
        id: setup-uv
        # v6.4.3
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc
        with:
          cache-dependency-glob: |
            **/pyproject.toml
            **/uv.lock

      - name: Install dependencies
        run: make deps

      - name: Install Mermaid CLI
        run: |
          set -euxo pipefail
          bun install --global @mermaid-js/mermaid-cli@11.9.0
          bun x @puppeteer/browsers browsers install chrome-headless-shell
          mmdc --version

      - name: Debug Bun and Mermaid
        run: |
          set -euxo pipefail
          which mmdc
          mmdc --version
          bun --version

      - name: Install Nixie
        run: uv tool install --from git+https://github.com/leynos/nixie nixie

      - name: Nixie
        run: make nixie

      - name: Markdown lint
        uses: DavidAnson/markdownlint-cli2-action@992badcdf24e3b8eb7e87ff9287fe931bcb00c6e # v20
        with:
          globs: '**/*.md'

      - name: Setup Helm
        # v4.3.1
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4
        with:
          version: v3.15.0

      - name: Install yamllint
        run: pip install yamllint==1.35.1

      - name: Helm lint
        run: helm lint --strict ./deploy/charts/wildside

      - name: YAML lint
        run: make yamllint

      - name: Type check
        run: make typecheck

      # Backend
      - name: Rust build
        run: cargo build --manifest-path backend/Cargo.toml --release
      - name: Cache cargo
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Rust fmt check
        run: cargo fmt --manifest-path backend/Cargo.toml --all -- --check
      - name: Rust clippy
        run: cargo clippy --manifest-path backend/Cargo.toml --all-targets --all-features -- -D warnings
      - name: Rust tests
        run: RUSTFLAGS="-D warnings" cargo test --manifest-path backend/Cargo.toml --all-targets --all-features

      # OpenAPI dump (at runtime or via a small bin)
      - name: Run backend to extract OpenAPI
        run: |
          mkdir -p spec
          # Prefer generating from source; keep fallback only if generation is unavailable
          if cargo run --manifest-path backend/Cargo.toml --bin openapi-dump > spec/openapi.json; then
            echo "OpenAPI generated from backend"
          else
            echo "openapi-dump bin not available; using existing spec or placeholder"
            test -s spec/openapi.json || echo '{"openapi":"3.0.3","info":{"title":"placeholder","version":"0.0.0"},"paths":{}}' > spec/openapi.json
          fi

      # Frontend
      - name: Build tokens
        working-directory: packages/tokens
        run: |
          bun install
          bun run build
      - name: Build PWA
        working-directory: frontend-pwa
        run: |
          bun install
          bun run build
