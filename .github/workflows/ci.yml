name: ci
"on":
  push:
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.1.x'

      # Backend
      - name: Rust build
        run: cargo build --manifest-path backend/Cargo.toml --release
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Rust fmt check
        run: cargo fmt --manifest-path backend/Cargo.toml --all -- --check
      - name: Rust clippy
        run: cargo clippy --manifest-path backend/Cargo.toml --all-targets --all-features -- -D warnings
      - name: Rust tests
        run: RUSTFLAGS="-D warnings" cargo test --manifest-path backend/Cargo.toml --all-targets --all-features

      # OpenAPI dump (at runtime or via a small bin)
      - name: Run backend to extract OpenAPI
        run: |
          mkdir -p spec
          # Prefer generating from source; keep fallback only if generation is unavailable
          if cargo run --manifest-path backend/Cargo.toml --bin openapi-dump > spec/openapi.json; then
            echo "OpenAPI generated from backend"
          else
            echo "openapi-dump bin not available; using existing spec or placeholder"
            test -s spec/openapi.json || echo '{"openapi":"3.0.3","info":{"title":"placeholder","version":"0.0.0"},"paths":{}}' > spec/openapi.json
          fi

      # Frontend
      - name: Build tokens & PWA
        run: |
          cd packages/tokens && bun install && bun run build
          cd ../../frontend-pwa && bun install && bun run build
