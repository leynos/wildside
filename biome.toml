# Biome Configuration File (TOML format)
# Generated from the combined JSON configuration.

schema = "https://biomejs.dev/schemas/stable/schema.json"
root = true

[files]
includes = ["**"]
ignores = [
  "node_modules",
  "dist",
  "**/dist/**",
  "build",
  "**/build/**",
  "coverage",
  ".git",
  "**/target",
  "**/*.min.*",
  "**/*.d.ts",
]

[formatter]
enabled = true
indent_style = "space"
indent_width = 2
line_width = 100

[javascript]
jsx_runtime = "automatic"

[javascript.formatter]
arrow_parentheses = "always"
bracket_spacing = true
jsx_quote_style = "double"
quote_style = "single"
semicolons = "always"
trailing_commas = "all"

[linter]
enabled = true

[linter.rules]
recommended = true

[linter.rules.correctness]
no-duplicate-object-keys = "error"
no-invalid-constructor-super = "error"
no-invalid-use-before-declaration = "error"
no-undeclared-variables = "error"
no-unreachable = "error"
no-unsafe-optional-chaining = "error"
no-unused-imports = "error"
no-unused-variables = "error"
use-getter-return = "error"
use-valid-for-direction = "error"
use-valid-typeof = "error"

[linter.rules.suspicious]
no-console = "error"
no-debugger = "error"
no-double-equals = { level = "error", options = { ignore-null = false } }
no-duplicate-case = "error"
no-duplicate-class-members = "error"
no-duplicate-else-if = "error"
no-duplicate-parameters = "error"
no-explicit-any = "error"
no-extra-non-null-assertion = "error"
no-fallthrough-switch-clause = "error"
no-implicit-any-let = "error"
no-import-assign = "error"
no-irregular-whitespace = "error"
no-prototype-builtins = "error"
no-shadow-restricted-names = "error"
no-ts-ignore = "error"
no-var = "error"

[linter.rules.style]
no-inferrable-types = "error"
no-parameter-assign = "error"
no-process-env = "error"
no-useless-catch = "error"
no-useless-ternary = "error"
use-array-literals = "error"
use-consistent-array-type = "error"
use-const = "error"
use-export-type = "error"
use-filenaming-convention = { level = "error", options = { require-ascii = true, strict-case = true, filename-cases = ["kebab-case", "export"] } }
use-for-of = "error"
use-import-type = "error"
use-naming-convention = { level = "error", options = { require-ascii = true, strict-case = true, conventions = [
  { selector = { kind = "variable" }, match = "(.{2,})" },
  { selector = { kind = "class" }, formats = ["PascalCase"] },
  { selector = { kind = "typeLike" }, formats = ["PascalCase"] },
  { selector = { kind = "enum" }, formats = ["PascalCase"] },
  { selector = { kind = "classMember", modifiers = ["private"] }, match = "_(.+)" },
  { selector = { kind = "const", scope = "global" }, formats = ["CONSTANT_CASE"] },
] } }
use-object-spread = "error"
use-readonly-class-properties = "error"
use-self-closing-elements = "error"
use-shorthand-assign = "error"
use-shorthand-function-type = "error"
use-single-var-declarator = "error"
use-template = "error"
use-throw-only-error = "error"
use-unified-type-signatures = "error"

[linter.rules.complexity]
no-arguments = "error"
no-banned-types = "error"
no-comma-operator = "error"
no-excessive-cognitive-complexity = { level = "error", options = { max-allowed-complexity = 15 } }
no-for-each = "error"
no-implicit-coercions = "error"
no-nested-ternary = "error"
no-static-only-class = "error"
no-useless-else = "error"
use-while = "error"

[linter.rules.performance]
no-accumulating-spread = "error"
no-namespace-import = "error"

[linter.rules.nursery]
no-barrel-file = "error"
no-const-enum = "error"
no-excessive-lines-per-function = { level = "error", options = { max-lines = 60, skip-blank-lines = true, skip-iifes = true } }
no-floating-promises = "error"
no-import-cycles = "error"
no-non-null-assertion = "error"
use-exhaustive-switch-cases = "error"

[[overrides]]
includes = [
  "**/*.{test,spec}.{js,jsx,ts,tsx}",
  "**/{__tests__,test,tests}/**/*.{js,jsx,ts,tsx}",
  "**/{features,step_definitions,steps}/**/*.{js,jsx,ts,tsx}",
]

[overrides.linter.rules.suspicious]
no-console = "off"
no-explicit-any = "warn"

[overrides.linter.rules.nursery]
no-floating-promises = "warn"

[[overrides]]
includes = ["**/*.tsx"]

[overrides.linter.rules.style]
use-filenaming-convention = { level = "error", options = { strict-case = true, require-ascii = true, filename-cases = ["PascalCase", "export"] } }
